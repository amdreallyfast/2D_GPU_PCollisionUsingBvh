// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// - PARALLEL_SORT_WORK_GROUP_SIZE
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES ParticleBuffer.comp
// REQUIRES Random.comp
// REQUIRES NewVelocityBetweenMinAndMax.comp
// REQUIRES QuickNormalize.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

// Note: Binding must be declared in the shader: https://www.opengl.org/wiki/Atomic_Counter.
layout (binding = ATOMIC_COUNTER_BUFFER_BINDING, offset = 0) uniform atomic_uint acResetParticleCounter;


uniform float uMinParticleVelocity;
uniform float uMaxParticleVelocity;
uniform vec4 uBarEmitterP1;
uniform vec4 uBarEmitterP2;
uniform vec4 uBarEmitterEmitDir;

// this value is used to prevent uMaxNumParticles particles from being emitted all at once
// Note: This is particularly helpful when the particles are spread out on multiple emitters.
uniform uint uMaxParticleEmitCount;

/*------------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.
Parameters: None
Returns:    None
Creator:    John Cox, 4/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= uMaxNumParticles)
    {
        return;
    }
    else if (AllParticles[index]._isActive != 0)
    {
        // still active, so don't reset
        return;
    }
    else if (atomicCounterIncrement(acResetParticleCounter) >= uMaxParticleEmitCount)
    {
        // already hit the limit for how many particles can be emitted this frame
        return;
    }

    // thread index is referring to an inactive particle and this emitter hasn't reached its 
    // emit limit yet for this frame, so give the particle at this thread index a new position 
    // and velocity
    Particle pCopy = AllParticles[index];

    // position
    float blendAlpha = RandomOnRange0To1(pCopy._pos.xy);
    pCopy._pos = mix(uBarEmitterP1, uBarEmitterP2, blendAlpha);

    // velocity
    vec4 velocityDir = QuickNormalize(uBarEmitterEmitDir);
    vec4 minVel = uMinParticleVelocity * velocityDir;
    vec4 maxVel = uMaxParticleVelocity * velocityDir;
    blendAlpha = RandomOnRange0To1(pCopy._vel.xy);
    pCopy._vel = mix(minVel, maxVel, blendAlpha);

    // set to "active"
    pCopy._isActive = 1;

    // write particle back to global memory
    AllParticles[index] = pCopy;
}
