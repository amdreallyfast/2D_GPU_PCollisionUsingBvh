// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// - PARALLEL_SORT_WORK_GROUP_SIZE
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES ParticleBuffer.comp
// REQUIRES ParticleRegionBoundaries.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

// Note: Binding must be declared in the shader: https://www.opengl.org/wiki/Atomic_Counter.
layout (binding = ATOMIC_COUNTER_BUFFER_BINDING, offset = 0) uniform atomic_uint acActiveParticleCounter;


uniform float uDeltaTimeSec;

/*------------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.
Parameters: None
Returns:    None
Creator:    John Cox (9-25-2016)
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumParticles)
    {
        return;
    }
    else if (AllParticles[threadIndex]._isActive == 0)
    {
        // don't update
        return;
    }

    vec4 particlePosition = AllParticles[threadIndex]._pos;
    vec4 particleVelocity = AllParticles[threadIndex]._vel;
    vec4 newPos = particlePosition + (particleVelocity * uDeltaTimeSec);

    // if it went out of bounds, turn it off and don't record the updated particle
    bool outOfBoundsX = newPos.x < PARTICLE_REGION_MIN_X || newPos.x > (PARTICLE_REGION_MIN_X + PARTICLE_REGION_RANGE_X);
    bool outOfBoundsY = newPos.y < PARTICLE_REGION_MIN_Y || newPos.y > (PARTICLE_REGION_MIN_Y + PARTICLE_REGION_RANGE_Y);
    bool outOfBoundsZ = newPos.z < PARTICLE_REGION_MIN_Z || newPos.z > (PARTICLE_REGION_MIN_Z + PARTICLE_REGION_RANGE_Z);

    if (outOfBoundsX || outOfBoundsY || outOfBoundsZ)
    {
        // just went out of bounds
        AllParticles[threadIndex]._isActive = 0;
        return;
    }

    // still active
    AllParticles[threadIndex]._pos = newPos;

    // Note: The "active particles" counter is useful for
    // (1) printing how many particles are active and 
    // (2) reducing workload for other compute shaders so that they only have to work on the 
    // active particles
    atomicCounterIncrement(acActiveParticleCounter);
}

