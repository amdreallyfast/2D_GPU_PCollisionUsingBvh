// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES ParticleBuffer.comp


// Y and Z work group sizes default to 1
layout (local_size_x = PARTICLE_OPERATIONS_WORK_GROUP_SIZE_X) in;



/*------------------------------------------------------------------------------------------------
Description:
    For elastic collisions between two different masses (ignoring rotation because these 
    particles are points), use the calculations from this article (I followed them on paper too 
    and it seems legit)
    http://www.gamasutra.com/view/feature/3015/pool_hall_lessons_fast_accurate_.php?page=3

    Note: For an elastic collision between two particles of equal mass, the velocities of the 
    two will be exchanged.  I could use this simplified idea for this demo, but I want to 
    eventually have the option of different masses of particles, so I will use the general 
    case elastic collision calculations (bottom of page at link).
    http://hyperphysics.phy-astr.gsu.edu/hbase/colsta.html

Parameters: None
Returns:    None
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    // Note: By definition of the BVH's construction, only active particles are counted.  This 
    // means that there is no need to check if any collision candidates are active.  Conversely, 
    // if a particle is inactive, then it is not in the tree and thus is not participating in 
    // collision detection.
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumParticles ||
        threadIndex >= uNumActiveParticles)
    {
        // no collisions for inactive particles (they were left out of the BVH anyway)
        return;
    }

    // this value is set at the end of DetectCollisions.comp
    // Note: DetectCollisions.comp also performs a check to make sure that the two particles' 
    // collision spheres intersect, not just their bounding boxes.
    int otherGuyIndex = AllParticles[threadIndex]._collideWithThisParticleIndex;
    if (otherGuyIndex == -1)
    {
        return;
    }

    // local copies will be easier to work with
    Particle p1 = AllParticles[threadIndex];
    Particle p2 = AllParticles[otherGuyIndex];
    
    // Note: I don't have an intuitive understanding of these calculations, but they work.  If I 
    // understood it better, then I could write better comments and variable names, but I don't, 
    // so I'm keeping it the way that I found it in the gamasutra article, or at least as much 
    // as I can given that it is math and pseudocode.
    vec4 p1ToP2 = vec4(p2._pos.xyz - p1._pos.xyz, 0.0f);
    vec4 normalizedLineOfContact = p1ToP2 * inversesqrt(dot(p1ToP2, p1ToP2));
    float a1 = dot(p1._vel, p1ToP2);
    float a2 = dot(p2._vel, p1ToP2);
    float fraction = (2.0f * (a1 - a2)) / (p1._mass + p2._mass);
    vec4 p1VelocityPrime = p1._vel - (fraction * p2._mass * normalizedLineOfContact);
    vec4 p2VelocityPrime = p2._vel + (fraction * p1._mass * normalizedLineOfContact);
    
    // write results back to global memory
    //??how to only have one thread handle both conditions without a race condition? atomicAdd(...) on a dedicated member? should I even other? what if the other particle had a better collision with someone else??
    AllParticles[threadIndex]._vel = p1VelocityPrime;
    AllParticles[otherGuyIndex]._vel = p2VelocityPrime;
}
