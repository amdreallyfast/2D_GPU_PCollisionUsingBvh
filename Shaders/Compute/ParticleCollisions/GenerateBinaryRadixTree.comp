// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES ParticleSortingDataBuffer.comp
// REQUIRES BvhNodeBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

/*------------------------------------------------------------------------------------------------
Description:
    Calculates the number of leading bits that the two arguments have in common.  

    Ex: 0b00001 and 0b10001
    The common prefix is length 0.  There are three bits in common, but they are not leading 
    bits.

    This is part of the binary radix tree generation described in this paper:
    http://devblogs.nvidia.com/parallelforall/wp-content/uploads/2012/11/karras2012hpg_paper.pdf

    This method performs the job of the pseudocode's sigma.  

    Note: The paper said to, if the values were equal, concatenate the bits of the index to 
    the bits of the values being analyzed and then then determine the longest common prefix.  
    This implementation only lives in 32bit land, so I can't concatenate a 32bit value to 
    another 32bit value.  There aren't enough bits.  I'd need a a 64bit uint for that.  But I 
    can determine the longest common prefix of the values and of their indices and then add the 
    two together if necessary.  
    
    Ex 1: 
        // suppose our integers live in 5bit land
        value1 at indexA = 0b00010
        value2 at indexB = 0b01111
        longest common prefix = 1 (the most significant bit)

    Ex 2:
        // equal values get special handling
        value1 at indexA = 0b11010
        value2 at indexB = 0b11010
        length of common prefix = 5 (all bits identical)
        let indexA = 13 = 0b01101
        let indexB = 14 = 0b01110
        length of common prefix = 3 (most significant bits)
        reported common prefix length = 5 + 3 = 8;

    This will not be necessary if all the values in the ParticleSortingDataBuffer are unique.

    Also Note: I discovered by experimentation that always adding the lenght of the common 
    prefixes together messed up the tree.  So only add the length of the common prefix if the 
    values are equal.

Parameters: 
    indexA  An index into the "leaf" section of AllBvhNodes.  Expected to be thread ID.
    indexB  Another index into the "leaf" section of AllBvhNodes.
Returns:    
    See Description.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
int LengthOfCommonPrefix(int indexA, int indexB)
{
    // don't need to check 'a' because the thread ID should always be in bounds
    // Note: It seems that a >= comparison between int and uint is ok, no cast required.
    if (indexB < 0 || indexB >= uBvhNumberLeaves)
    {
        return -1;
    }
    
    uint valueA = AllParticleSortingData[indexA]._sortingData;
    uint valueB = AllParticleSortingData[indexB]._sortingData;

    // the XOR will highlight the bits that are different, thus leaving as 0s all the bits that 
    // are identical
    // Note: Special thanks to concerned-cynic on the OpenGL subreddit for alerting me to the 
    // GLSL-native function findMSB(...).  GLSL lives in 32-bit land, so this function can be 
    // easily turned into a "count leading zeros" function by "32 - findMSB(...)".
    return (32 - findMSB(valueA ^ valueB));
}

/*------------------------------------------------------------------------------------------------
Description:
    Determines how many leaves this internal node covers, minus 1.  I don't have an intuitive 
    explanation, but the math works out.  The number of nodes covered depends on depth into the 
    tree.

    Part of the binary radix tree generation described in this paper:
    http://devblogs.nvidia.com/parallelforall/wp-content/uploads/2012/11/karras2012hpg_paper.pdf

    This is only called once by main(), but I thought that it made the algorithm easier to read 
    if this part of it was off in its own function.

    Note: It may be possible to find the length ("range", or number of leaf nodes that this 
    internal node covers) in a single loop, but the only way that I'm aware of is a linear 
    search through all items.  The whole point of a binary search is to reduce an O(n) solution 
    to O(log n), so keep the 2-loop solution.

Parameters: 
    startNodeIndex  An index into the internal node section of the BvhNodeBuffer.
    direction       -1 or +1.  If it is 0, something has gone terribly wrong.
Returns:    
    See Description.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
int DetermineRange(int startNodeIndex, int direction)
{
    // determine how many leaves this internal node covers ("range") 
    int minimumCommonPrefixLength = LengthOfCommonPrefix(startNodeIndex, startNodeIndex - direction);
    
    int maxPossibleLength = 2;
    int secondNodeIndex = startNodeIndex + (maxPossibleLength * direction);
    while (LengthOfCommonPrefix(startNodeIndex, secondNodeIndex) > minimumCommonPrefixLength)
    {
        maxPossibleLength *= 2;
        secondNodeIndex = startNodeIndex + (maxPossibleLength * direction);
    }

    // find actual length using a binary search on the max possible length
    int actualLengthSans1 = 0;
    for (int rangeIncrement = maxPossibleLength >> 1; rangeIncrement >= 1; rangeIncrement >>= 1)
    {
        secondNodeIndex = startNodeIndex + ((actualLengthSans1 + rangeIncrement) * direction);
        if (LengthOfCommonPrefix(startNodeIndex, secondNodeIndex) > minimumCommonPrefixLength)
        {
            actualLengthSans1 += rangeIncrement;
        }
    }

    return actualLengthSans1;
}

/*------------------------------------------------------------------------------------------------
Description:
    Finds the "split index", which is the leaf node just prior to the one where the common 
    prefix in the nodes in the range changes.  The number of bits under consider depends on the 
    range, which is a function of node depth.

    Example tree (taken from by-hand calculations):
        Leaf0 = 0b00001
        Leaf1 = 0b00010
        Leaf2 = 0b00011
        Leaf3 = 0b01001
        Leaf4 = 0b01001
        Leaf5 = 0b01110
        Leaf6 = 0b01111

    N-1 internal nodes
    Internal node 0 covers the range 0-6, split is at Leaf2
    Internal node 1 covers the range 1-2, split is at Leaf1
    Internal node 2 covers the range 0-2, split is at Leaf0
    Internal node 3 covers the range 3-6, split is at Leaf4
    Internal node 4 covers the range 3-4, split is at Leaf3
    Internal node 5 covers the range 5-6, split is at Leaf5

    It is part of the binary radix tree generation described in this paper:
    http://devblogs.nvidia.com/parallelforall/wp-content/uploads/2012/11/karras2012hpg_paper.pdf

    Like DetermineRange(...), this is only called once by main(), but I thought that it made the 
    algorithm easier to read if this part of it was off in its own function.

Parameters: 
    startNodeIndex  An index into the internal node section of the BvhNodeBuffer.
    length          See DetermineRange(...) Description.
    direction       -1 or +1.  If it is 0, something has gone terribly wrong.
Returns:    
    The number of leaf nodes that are below this internal node in the hierarchy.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
int FindSplitPosition(int startNodeIndex, int length, int direction)
{
    int otherEndIndex = startNodeIndex + (length * direction);
    int commonPrefixLengthBetweenBeginAndEnd = LengthOfCommonPrefix(startNodeIndex, otherEndIndex);
    int splitOffset = 0;

    // Note: The loop should run through rangeIncrement == 1, dividing in half each time (log2 
    // ranging search), but calling ceil(...) with anything on the range [0,1] will return 1.  
    // A do-while(...) loop will work nicely here and avoid an infinite loop.
    float rangeIncrement = length;
    do
    {
        // cut the increment in half on each loop
        rangeIncrement = ceil(rangeIncrement * 0.5f);
        int rangeIncrementInteger = int(rangeIncrement);
        int secondNodeIndex = startNodeIndex + ((splitOffset + rangeIncrementInteger) * direction);
        if (LengthOfCommonPrefix(startNodeIndex, secondNodeIndex) > commonPrefixLengthBetweenBeginAndEnd)
        {
            splitOffset += rangeIncrementInteger;
        }
    } while (rangeIncrement > 1.0f);

    int splitIndex = startNodeIndex + (splitOffset * direction) + min(direction, 0);

    return splitIndex;
}


/*------------------------------------------------------------------------------------------------
Description:
    Performs a parallel construction of a binary radix tree.

    The algorithm has been adapted from this paper to OpenGL compute shaders:
    http://devblogs.nvidia.com/parallelforall/wp-content/uploads/2012/11/karras2012hpg_paper.pdf

    Other influence came from the article that linked to the paper:
    https://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/

    This algorithm has been worked through by hand and followed by a CPU implementation before 
    creating this compute shader version.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uBvhNumberInternalNodes)
    {
        return;
    }

    // cast a few unsigned values to signed
    // Note: This algorithm invloves lots of index calculations that must be allowed to go 
    // negative.  For example, the function LengthOfCommonPrefix(...) will return -1 if the 
    // second index is out of range.  That is an important part of the range calculation.
    int thisLeafIndex = int(threadIndex);
    int thisInternalNodeIndex = int(uBvhNumberLeaves + threadIndex);
    int rootInternalNodeIndex = int(uBvhNumberLeaves);

    // prep for next stage (MergeBoundingVolumes.comp)
    AllBvhNodes[thisInternalNodeIndex]._threadEntranceCounter = 0;

    // build the tree

    // Note: If I made LengthOfCommonPrefix(...) correctly and all the sorted data that this 
    // tree is being built over is unique, then the common prefixes between a value and its 
    // two neighbors will never be identical and thus the direction will never be 0.  If it is, 
    // then something has gone terribly wrong with the data set.
    int commonPrefixLengthBefore = LengthOfCommonPrefix(thisLeafIndex, thisLeafIndex - 1);
    int commonPrefixLengthAfter = LengthOfCommonPrefix(thisLeafIndex, thisLeafIndex + 1);
    int d = sign(commonPrefixLengthAfter - commonPrefixLengthBefore);
    int range = DetermineRange(thisLeafIndex, d);
    int splitIndex = FindSplitPosition(thisLeafIndex, range, d);
    
    // already calculated in FindSplitPosition(...), but it's already returning a value and this 
    // calculation is cheap and it's needed, so do it again
    int otherEndIndex = thisLeafIndex + (range * d);

    int leftChildIndex = -12;
    if (min(thisLeafIndex, otherEndIndex) == splitIndex)
    {
        // left child is a leaf node
        leftChildIndex = splitIndex;
    }
    else
    {
        // left child is an internal node
        leftChildIndex = rootInternalNodeIndex + splitIndex;
    }
    AllBvhNodes[thisInternalNodeIndex]._leftChildIndex = leftChildIndex;

    int rightChildIndex = -12;
    if (max(thisLeafIndex, otherEndIndex) == (splitIndex + 1))
    {
        // right child is a leaf node
        rightChildIndex = splitIndex + 1;
    }
    else
    {
        // right child is an internal node
        rightChildIndex = rootInternalNodeIndex + splitIndex + 1;
    }
    AllBvhNodes[thisInternalNodeIndex]._rightChildIndex = rightChildIndex;

    // in the next stage (constructing the bounding volumes out of this new tree's hierarchy), 
    // both nodes need the option of traversing up to their parent
    // Note: This should set both leaf node and internal parent indices.
    // Also Note: If this algorithm is working correctly, then all internal nodes should have 
    // exactly 2 children, so there should be no need for an "index is -1" check.
    AllBvhNodes[leftChildIndex]._parentIndex = thisInternalNodeIndex;
    AllBvhNodes[rightChildIndex]._parentIndex = thisInternalNodeIndex;
}

