// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations


/*------------------------------------------------------------------------------------------------
Description:   
    A convenience structure for BvhNode.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
struct BoundingBox
{
    float _left;
    float _right;
    float _top;
    float _bottom;
};

/*------------------------------------------------------------------------------------------------
Description:   
    Stores info about a single node in the BVH.  Can be either an internal node or a leaf node.  
    If internal, then its children are either leaf nodes or other internal nodes.  If a leaf 
    node, then it will have _data to analyze.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
struct BvhNode
{
    BoundingBox _boundingBox;

    uint _isLeaf;
    uint _parentIndex;
    uint _leftChildIndex;
    uint _rightChildIndex;
    uint _data;

    //   4-word bounding box (16 bytes)
    // + 4x 4-word members (16 bytes)
    // + 1x 4-word member
    // => need 3x * 4-word = 12bytes of buffer space on the CPU side
};


// see description of BvhNodeBuffer for detail
layout(location = UNIFORM_LOCATION_BVH_NUMBER_LEAVES) uniform uint uBvhNumberLeaves;
layout(location = UNIFORM_LOCATION_BVH_NUMBER_INTERNAL_NODES) uniform uint uBvhNumberInternalNodes;
layout(location = UNIFORM_LOCATION_BVH_NODE_BUFFER_SIZE) uniform uint uBvhNodeBufferSize;

/*-----------------------------------------------------------------------------------------------
Description:
    The SSBO that will contain all nodes necessary for the internal nodes and the leaf nodes of 
    the BVH.

    The number of internal nodes shall be #particles - 1;
    The number of leaf nodes shall be #particles.
Creator:    John Cox, 5/2017
-----------------------------------------------------------------------------------------------*/
layout (std430, binding = BVH_NODE_BUFFER_BINDING) buffer BvhNodeBuffer
{
    // leaf nodes first, then internal nodes 
    Node AllBvhNodes[];
};


