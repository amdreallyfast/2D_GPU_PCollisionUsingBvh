// REQUIRES SsboBufferBindings.comp
//  PREFIX_SCAN_BUFFER_BINDING
// REQUIRES CrossShaderUniformLocations
//  UNIFORM_LOCATION_PARTICLE_BUFFER_SIZE


struct BoundingBox
{
    float _left;
    float _right;
    float _top;
    float _bottom;
};

/*------------------------------------------------------------------------------------------------
Description:   
    Stores info about a single node in the BVH.  Can be either an internal node or a leaf node.  
    If internal, then its children are either leaf nodes or other internal nodes.  If a leaf, 
    then it will have an index to the particle whose bounding box it describes.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
struct Node
{
    BoundingBox _boundingBox;

    uint _leftChildNodeIndex;
    uint _rightChildNodeIndex;
    bool _isLeaf;

    // only valid if _isLeaf is true
    uint _particleIndex;
};


// see description of BvhNodeBuffer for detail
layout(location = UNIFORM_LOCATION_BVH_NUMBER_INTERNAL_NODES) uniform uint uBvhNumberInternalNodes;
layout(location = UNIFORM_LOCATION_BVH_NUMBER_LEAVES) uniform uint uBvhNumberLeaves;
layout(location = UNIFORM_LOCATION_BVH_NODE_BUFFER_SIZE) uniform uint uBvhNodeBufferSize;

/*-----------------------------------------------------------------------------------------------
Description:
    The SSBO that will contain all nodes necessary for the internal nodes and the leaf nodes of 
    the BVH.

    The number of internal nodes shall be #particles - 1;
    The number of leaf nodes shall be #particles.
Creator:    John Cox, 5/2017
-----------------------------------------------------------------------------------------------*/
layout (std430, binding = BVH_NODE_BUFFER_BINDING) buffer BvhNodeBuffer
{
    // internal nodes first, then leaf nodes
    Node AllBvhNodes[];
};


