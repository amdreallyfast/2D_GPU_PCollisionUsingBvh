// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES BvhNodeBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;


/*------------------------------------------------------------------------------------------------
Description:
    This shader generates bounding boxes for each of the leaves, then works up the tree to the 
    root, merging bounding boxes as they go.  Only one thread is allowed to do the merging of 
    two child nodes at a time, so the number of active threads decreases as they go up the 
    chain.  This shouldn't be much of a performance problem though because the algorithm is 
    simple and fast and only goes through approximately log2N iterations in a balanced binary 
    tree.
    
    Note: log2N is ~16 for N = 50,000 leaves and is ~20 for N = 1,000,000 leaves.
    
    This comes as part of this BVH algorithm, specifically the section 
    "Bounding Box Calculation":
    https://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/

    This algorithm has been worked through by hand and followed by a CPU implementation before 
    creating this compute shader version.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uBvhNumberLeaves)
    {
        return;
    }

    // start at the leaves and merge bounding boxes up through the root
    // Note: The parent index should only be -1 at the root node.
    int nodeIndex = AllBvhNodes[threadIndex]._parentIndex;
    while(nodeIndex != -1)
    {
        // prevent race conditions to the parent node
        // Note: This suggestion comes the source material given in main()'s comment block.  
        // "To avoid duplicate work, the idea is to use an atomic flag per node to terminate the 
        // first thread that enters it, while letting the second one through. This ensures that 
        // every node gets processed only once, and not before both of its children are 
        // processed."
        // Also Note: If this is incremented more than twice, then there is a problem with the 
        // tree.  This is a binary tree, and a binary tree should have exactly two leaves per 
        // node.  A third increment, or a fourth, or more would mean that the node has more than 
        // two other nodes referencing it as their parent.  This is problem with tree 
        // construction, not bounding box merging.
        if (atomicAdd(AllBvhNodes[nodeIndex]._threadEntranceCounter, 1) == 0)
        {
            return;
        }
        
        int leftChildIndex = AllBvhNodes[nodeIndex]._leftChildIndex;
        int rightChildIndex = AllBvhNodes[nodeIndex]._rightChildIndex;
        BoundingBox leftBb = AllBvhNodes[leftChildIndex]._boundingBox;
        BoundingBox rightBb = AllBvhNodes[rightChildIndex]._boundingBox;

        BoundingBox thisBb;
        thisBb._left = min(leftBb._left, rightBb._left);
        thisBb._right = max(leftBb._right, rightBb._right);
        thisBb._bottom = min(leftBb._bottom, rightBb._bottom);
        thisBb._top = max(leftBb._top, rightBb._top);
        AllBvhNodes[nodeIndex]._boundingBox = thisBb;

        // next
        nodeIndex = AllBvhNodes[nodeIndex]._parentIndex;
    }
}




