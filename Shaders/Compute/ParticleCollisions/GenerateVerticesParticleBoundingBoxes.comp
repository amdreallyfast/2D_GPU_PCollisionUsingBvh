// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES ParticleBoundingBoxGeometryBuffer.comp
// REQUIRES ParticlePropertiesBuffer.comp
// REQUIRES ParticleBuffer.comp


// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;


/*------------------------------------------------------------------------------------------------
Description:
    Looks up each particle's collision radius and position and uses them to create a box 
    representation of each particle's collision circle.  Sticks it into the 
    ParticleBoundingBoxGeometryBuffer.
Parameters: None
Returns:    None
Creator:    John Cox, 6/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumParticles)
    {
        return;
    }
    else if (AllParticles[threadIndex]._isActive == 0)
    {
        BoundingBox nullBb;
        AllParticleBoundingBoxes[threadIndex] = nullBb;
        return;
    }

    int particleType = AllParticles[threadIndex]._particleTypeIndex;
    float collisionRadius = AllParticleProperties[particleType]._collisionRadius;
    vec4 pos = AllParticles[threadIndex]._pos;

    float left = pos.x - collisionRadius;
    float right = pos.x + collisionRadius;
    float top = pos.y + collisionRadius;
    float bottom = pos.y - collisionRadius;

    PolygonFace leftFace;
    PolygonFace rightFace;
    PolygonFace topFace;
    PolygonFace bottomFace;

    // the particle for this node is active, so make the 4 faces of the bounding box
    leftFace._start._pos = vec4(left, bottom, 0.0f, 1.0f);
    leftFace._end._pos = vec4(left, top, 0.0f, 1.0f);
    rightFace._start._pos = vec4(right, bottom, 0.0f, 1.0f);
    rightFace._end._pos = vec4(right, top, 0.0f, 1.0f);
    topFace._start._pos = vec4(left, top, 0.0f, 1.0f);
    topFace._end._pos = vec4(right, top, 0.0f, 1.0f);
    bottomFace._start._pos = vec4(left, bottom, 0.0f, 1.0f);
    bottomFace._end._pos = vec4(right, bottom, 0.0f, 1.0f);

    BoundingBox bb;
    bb._left = leftFace;
    bb._right = rightFace;
    bb._top = topFace;
    bb._bottom = bottomFace;

    AllParticleBoundingBoxes[threadIndex] = bb;
}