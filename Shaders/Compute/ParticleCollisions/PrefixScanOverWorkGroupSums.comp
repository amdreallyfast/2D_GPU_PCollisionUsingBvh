// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES PrefixScanBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

shared uint[PREFIX_SCAN_ITEMS_PER_WORK_GROUP] fastTempArr;


/*------------------------------------------------------------------------------------------------
Description:
    This is the second half of the parallel prefix scan algorithm.  It is the exact same 
    algorithm as in PrefixScanOverAllData.comp (see that shader for comments), but it 
    needs to work on a different buffer, which in GLSL need to be specified explicitly, so it 
    needs a different shader.

    See description of PrefixScanBuffer.comp for more detail on why a second stage is needed.
Parameters: None
Returns:    None
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint doubleGroupThreadIndex = gl_LocalInvocationID.x * 2;
    uint doubleGlobalThreadIndex = gl_GlobalInvocationID.x * 2;

    fastTempArr[doubleGroupThreadIndex] = PrefixSumsOfWorkGroupSums[doubleGlobalThreadIndex];
    fastTempArr[doubleGroupThreadIndex + 1] = PrefixSumsOfWorkGroupSums[doubleGlobalThreadIndex + 1];

    uint indexMultiplierDueToDepth = 1;

    for (uint dataPairs = PREFIX_SCAN_ITEMS_PER_WORK_GROUP >> 1; dataPairs > 0; dataPairs >>= 1)
    {
        barrier();
        if (gl_LocalInvocationID.x < dataPairs)
        {
            uint lesserIndex = (indexMultiplierDueToDepth * (doubleGroupThreadIndex + 1)) - 1;
            uint greaterIndex = (indexMultiplierDueToDepth * (doubleGroupThreadIndex + 2)) - 1;

            fastTempArr[greaterIndex] += fastTempArr[lesserIndex];
        }

        indexMultiplierDueToDepth *= 2;
    }

    if (doubleGroupThreadIndex == 0)
    {
        totalNumberOfOnes = fastTempArr[PREFIX_SCAN_ITEMS_PER_WORK_GROUP - 1];
        fastTempArr[PREFIX_SCAN_ITEMS_PER_WORK_GROUP - 1] = 0;
    }
    indexMultiplierDueToDepth >>= 1;

    for (uint dataPairs = 1; dataPairs < PREFIX_SCAN_ITEMS_PER_WORK_GROUP; dataPairs *= 2)
    {
        barrier();
        if (gl_LocalInvocationID.x < dataPairs)
        {
            uint lesserIndex = (indexMultiplierDueToDepth * (doubleGroupThreadIndex + 1)) - 1;
            uint greaterIndex = (indexMultiplierDueToDepth * (doubleGroupThreadIndex + 2)) - 1;

            uint temp = fastTempArr[lesserIndex];
            fastTempArr[lesserIndex] = fastTempArr[greaterIndex];
            fastTempArr[greaterIndex] += temp;
        }
        indexMultiplierDueToDepth >>= 1;
    }

    // wait for all the group threads to finish, then write back the two items
    barrier();
    PrefixSumsOfWorkGroupSums[doubleGlobalThreadIndex] = fastTempArr[doubleGroupThreadIndex];
    PrefixSumsOfWorkGroupSums[doubleGlobalThreadIndex + 1] = fastTempArr[doubleGroupThreadIndex + 1];
}

