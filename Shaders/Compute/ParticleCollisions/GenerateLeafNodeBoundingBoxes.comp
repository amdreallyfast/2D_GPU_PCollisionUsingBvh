// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES ParticleBuffer.comp
// REQUIRES ParticlePropertiesBuffer.comp
// REQUIRES BvhNodeBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

/*------------------------------------------------------------------------------------------------
Description:
    The binary radix tree (framework of the BVH) is created by analyzing the data over which the 
    leaf nodes are organized.  In this demo, leaves are the bounding box containers for 
    particles and share indices with their corresponding particles.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumParticles)
    {
        return;
    }
    
    if (AllParticles[threadIndex]._isActive == 0)
    {
        AllBvhNodes[threadIndex]._isNull = 1;
        return;
    }
    else
    {
        AllBvhNodes[threadIndex]._isNull = 0;
    }
    
    // create the bounding box for the bounding volume hierarchy
    vec4 pos = AllParticles[threadIndex]._pos;
    int particleTypeIndex = AllParticles[threadIndex]._particleTypeIndex;
    float r = AllParticleProperties[particleTypeIndex]._collisionRadius;

    BoundingBox bb;
    bb._left = pos.x - r;
    bb._right = pos.x + r;
    bb._bottom = pos.y - r;
    bb._top = pos.y + r;
    AllBvhNodes[threadIndex]._boundingBox = bb;
}
    