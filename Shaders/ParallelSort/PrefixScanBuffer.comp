// REQUIRES SsboBufferBindings.comp
//  PREFIX_SCAN_BUFFER_BINDING
// REQUIRES CrossShaderUniformLocations
//  UNIFORM_LOCATION_ALL_PREFIX_SUMS_SIZE



// Note: The ParallelSort compute controller should be carefully controlling the number of work 
// groups and therefore the number of threads, so this value shouldn't actually be neccesary for 
// excess thread checks (if gl_GlobalInvocationID.x > uPrefixSumsPerWorkGroupArraySize) { return; }),
// but it is good practice to have a uniform buffer size wherever there is buffer.
layout(location = UNIFORM_LOCATION_ALL_PREFIX_SUMS_SIZE) uniform uint uPrefixSumsPerWorkGroupArraySize;

/*------------------------------------------------------------------------------------------------
Description:
    This is the data that is being scanned AND that is being altered into a prefix sum.
    See explanation of sizes in PrefixSumSsbo.

    Note: The totalNumberOfOnes value between the buffers is set during in the middle of the 
    prefix scan algorithm of the PrefixSumsOfWorkGroupSums array in the same manner that entries 
    in PrefixSumsOfWorkGroupSums are set in the middle of each work group's prefix scan of 
    PrefixSumsPerWorkGroup.  It is used along with uPrefixSumsPerWorkGroupArraySize in 
    SortIntermediateData.comp to determine the total number of 0s and thus the 1s' offset.

    Prefix sum of 0s = index into PrefixSumsPerWorkGroup - value at that index (sum of 1s)

    Why is there a "number of 1s" variable being used to determine the number of 0s?  Because 
    (1) The 1s go after the 0s, so the index for the 1s requires knowing how many 0s came before.
    (2) You can sum all the 0s in the world and you will still get 0.  Sure, it is possible 
    to count the number of 0s, but then you'll have to use a counting algorithm, not a sum 
    algorithm.

    Also Note: Yes, PrefixSumsOfWorkGroupSums[] are prefix sums of other work group sums, but it 
    is necessary so that values from different work groups can get the full picture of all the 
    prefix sums that came before it.  This is part of Radix Sort.

Creator:    John Cox, 3/11/2017
------------------------------------------------------------------------------------------------*/
layout (std430, binding = PREFIX_SCAN_BUFFER_BINDING) buffer PrefixScanBuffer
{
    uint PrefixSumsOfWorkGroupSums[PARALLEL_SORT_ITEMS_PER_WORK_GROUP];
    uint totalNumberOfOnes;
    uint PrefixSumsPerWorkGroup[];
};

